/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL) return true;
        ListNode *slow;
        ListNode *fast;
        slow = head;
        fast = head;
        while (fast->next!=NULL && fast->next->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        //when fast point reaches the end of the list, 
        //the slow pointer will be at the mid of list.
        
        //reverse the last half list
        ListNode *curr = slow;
        ListNode *prev = NULL;
        ListNode *next = NULL;
        while (curr){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        while (prev->next){
            if (prev->val != head-> val) return false;
            prev = prev->next;
            head = head->next;
        }
        return true;
    }
};